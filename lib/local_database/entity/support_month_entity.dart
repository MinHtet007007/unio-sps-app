import 'dart:typed_data';

import 'package:floor/floor.dart';
import 'package:sps/local_database/tables/local_database_tables.dart';
import 'package:sps/models/support_month.dart';

@Entity(tableName: LocalDataBase.patient_support_month_table)
class SupportMonthEntity {
  @PrimaryKey(autoGenerate: true)
  final int? id;
  final int? remoteId;
  final int localPatientId;
  final int? remotePatientId;
  final String patientName;
  final int townshipId;
  final String date;
  final int month;
  final String monthYear;
  final double height;
  final double weight;
  final double bmi;
  final String planPackages;
  final String receivePackageStatus;
  final String reimbursementStatus;
  final int? amount;
  final String? remark;
  final Uint8List? supportMonthSignature;
  final bool isSynced;

  SupportMonthEntity(
      {this.id,
      this.remoteId,
      required this.localPatientId,
      required this.remotePatientId,
      required this.patientName,
      required this.townshipId,
      required this.date,
      required this.month,
      required this.monthYear,
      required this.height,
      required this.weight,
      required this.bmi,
      required this.planPackages,
      required this.receivePackageStatus,
      required this.reimbursementStatus,
      this.supportMonthSignature,
      this.amount,
      this.remark,
      this.isSynced = false});

  factory SupportMonthEntity.mapRemoteSupportMonthToLocalEntity(
      SupportMonth remoteSupportMonth, int localPatientId) {
    return SupportMonthEntity(
        id: null, // Auto-generated by the database
        remoteId: remoteSupportMonth.id,
        localPatientId: localPatientId,
        remotePatientId: remoteSupportMonth.patientId,
        townshipId:
            remoteSupportMonth.township.id, // Save the ID of the township
        date: remoteSupportMonth.date,
        month: remoteSupportMonth.month,
        monthYear: remoteSupportMonth.monthYear,
        height: remoteSupportMonth.height,
        weight: remoteSupportMonth.weight,
        bmi: remoteSupportMonth.bmi,
        planPackages: remoteSupportMonth.planPackages,
        receivePackageStatus: remoteSupportMonth.receivePackageStatus,
        reimbursementStatus: remoteSupportMonth.reimbursementStatus,
        amount: remoteSupportMonth.amount,
        remark: remoteSupportMonth.remark,
        patientName: remoteSupportMonth.patientName,
        isSynced: true);
  }
}
