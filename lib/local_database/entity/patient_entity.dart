import 'package:sps/local_database/tables/local_database_tables.dart';
import 'package:floor/floor.dart';
import 'package:sps/models/remote_patient.dart';

@Entity(tableName: LocalDataBase.patient_table)
class PatientEntity {
  @PrimaryKey(autoGenerate: true)
  final int? id;
  final int? remoteId;
  final String year;
  final String? spsStartDate;
  final int townshipId;
  final String? rrCode;
  final String drtbCode;
  final String spCode;
  final String? uniqueId;
  final String name;
  final int age;
  final String sex;
  final String? diedBeforeTreatmentEnrollment;
  final String? treatmentStartDate;
  final String treatmentRegimen;
  final String? treatmentRegimenOther;
  final String patientAddress;
  final String patientPhoneNo;
  final String contactInfo;
  final String contactPhoneNo;
  final String primaryLanguage;
  final String? secondaryLanguage;
  final int height;
  final int weight;
  final int bmi;
  final String? toStatus;
  final int? toYear;
  final String? toDate;
  final String? toRrCode;
  final String? toDrtbCode;
  final String? toUniqueId;
  final int? toTownshipId;
  final String? outcome;
  final String? remark;
  final String? treatmentFinished;
  final String? treatmentFinishedDate;
  final String? outcomeDate;
  final String? isReported;
  final String? reportPeriod;
  final int currentTownshipId;
  final bool isSynced;

  PatientEntity(
      {this.id,
      required this.year,
      this.remoteId,
      this.spsStartDate,
      required this.townshipId,
      this.rrCode,
      required this.drtbCode,
      required this.spCode,
      this.uniqueId,
      required this.name,
      required this.age,
      required this.sex,
      this.diedBeforeTreatmentEnrollment,
      this.treatmentStartDate,
      required this.treatmentRegimen,
      this.treatmentRegimenOther,
      required this.patientAddress,
      required this.patientPhoneNo,
      required this.contactInfo,
      required this.contactPhoneNo,
      required this.primaryLanguage,
      this.secondaryLanguage,
      required this.height,
      required this.weight,
      required this.bmi,
      this.toStatus,
      this.toYear,
      this.toDate,
      this.toRrCode,
      this.toDrtbCode,
      this.toUniqueId,
      this.toTownshipId,
      this.outcome,
      this.remark,
      this.treatmentFinished,
      this.treatmentFinishedDate,
      this.outcomeDate,
      this.isReported,
      this.reportPeriod,
      required this.currentTownshipId,
      required this.isSynced});

  factory PatientEntity.mapRemotePatientToLocalEntity(Patient remotePatient) {
    return PatientEntity(
        id: null, // Auto-generated by the database
        remoteId: remotePatient.id,
        year: remotePatient.year,
        spsStartDate: remotePatient.spsStartDate,
        townshipId: remotePatient.township.id, // Save the ID of the township
        rrCode: remotePatient.rrCode,
        drtbCode: remotePatient.drtbCode,
        spCode: remotePatient.spCode,
        uniqueId: remotePatient.uniqueId,
        name: remotePatient.name,
        age: remotePatient.age,
        sex: remotePatient.sex,
        diedBeforeTreatmentEnrollment:
            remotePatient.diedBeforeTreatmentEnrollment,
        treatmentStartDate: remotePatient.treatmentStartDate,
        treatmentRegimen: remotePatient.treatmentRegimen,
        treatmentRegimenOther: remotePatient.treatmentRegimenOther,
        patientAddress: remotePatient.patientAddress,
        patientPhoneNo: remotePatient.patientPhoneNo,
        contactInfo: remotePatient.contactInfo,
        contactPhoneNo: remotePatient.contactPhoneNo,
        primaryLanguage: remotePatient.primaryLanguage,
        secondaryLanguage: remotePatient.secondaryLanguage,
        height: remotePatient.height,
        weight: remotePatient.weight,
        bmi: remotePatient.bmi,
        toStatus: remotePatient.toStatus,
        toYear: remotePatient.toYear,
        toDate: remotePatient.toDate,
        toRrCode: remotePatient.toRrCode,
        toDrtbCode: remotePatient.toDrtbCode,
        toUniqueId: remotePatient.toUniqueId,
        toTownshipId: remotePatient.toTownship?.id, // Save the ID if exists
        outcome: remotePatient.outcome,
        remark: remotePatient.remark,
        treatmentFinished: remotePatient.treatmentFinished,
        treatmentFinishedDate: remotePatient.treatmentFinishedDate,
        outcomeDate: remotePatient.outcomeDate,
        isReported: remotePatient.isReported,
        reportPeriod: remotePatient.reportPeriod,
        currentTownshipId: remotePatient.currentTownship.id, // Save the ID
        isSynced: true);
  }
}
